class Analisis

types
public String = seq of char;

instance variables
private metales: seq of Metal;
private muestras: seq of Muestra;
private reportes: seq of Reporte;
private limites: map int to Metal;
private peligro: seq of String;

operations
public Analisis: () ==> Analisis
Analisis() == ();

public valoresPrueba1: () ==> () 
valoresPrueba1() == (
	limites := {1 |-> new Metal(1, "Plomo", 10.0), 2 |-> new Metal(2, "Mercurio", 6.0), 3 |-> new Metal(3, "Arsénico", 4.0)};		   
	metales := [new Metal(1, "Plomo", 12.5), new Metal(2, "Mercurio", 5.0), new Metal(3, "Arsénico", 3.2)];
	muestras := [new Muestra(1, "Laboratorio A", mk_(2024, 10, 20), mk_(14, 30, 0), [metales(1), metales(2)]), new Muestra(2, "Laboratorio B", mk_(2024, 10, 21), mk_(16, 0, 0), [metales(2), metales(3)])];
	reportes := [new Reporte(1, limites, muestras, false), new Reporte(2, limites, muestras, false)];
);

public valoresPrueba2: () ==> () 
valoresPrueba2() == (
	limites := {1 |-> new Metal(1, "Plomo", 10.0), 2 |-> new Metal(2, "Mercurio", 6.0), 3 |-> new Metal(3, "Arsénico", 4.0)};		   
	metales := [new Metal(1, "Plomo", 4.5), new Metal(2, "Mercurio", 5.0), new Metal(3, "Arsénico", 3.2)];
	muestras := [new Muestra(1, "Laboratorio A", mk_(2024, 09, 20), mk_(14, 30, 0), [metales(1), metales(2)]), new Muestra(2, "Laboratorio B", mk_(2024, 10, 21), mk_(16, 0, 0), [metales(2), metales(3)])];
	reportes := [new Reporte(1, limites, muestras, false), new Reporte(2, limites, muestras, false)];
);

public ejecutarAnalisis: () ==> String
ejecutarAnalisis() == (
  for all reporte in set elems reportes do (
    if reporte.riesgoMetal() then
		return "¡PELIGRO! CONCENTRACION DANINA";
  );
  return "SITUACION SEGURA";
);

end Analisis
